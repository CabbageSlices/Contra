#ifndef PLAYER_H_INCLUDED
#define PLAYER_H_INCLUDED

#include "SFML/Graphics.hpp"
#include "GlobalConstants.h"

struct PlayerKeys {

    sf::Keyboard::Key up = sf::Keyboard::Up;
    sf::Keyboard::Key down = sf::Keyboard::Down;
    sf::Keyboard::Key left = sf::Keyboard::Left;
    sf::Keyboard::Key right = sf::Keyboard::Right;

    sf::Keyboard::Key jump = sf::Keyboard::A;
    sf::Keyboard::Key shoot = sf::Keyboard::S;
};

class Player {

    public:

        Player(const PlayerKeys& keyConfiguration = PlayerKeys());

        void handleInputEvents(sf::Event& event, sf::RenderWindow& window);
        void handleKeystate(sf::RenderWindow& window);

        //time should be in seconds
        void update(const float& deltaTime, const sf::FloatRect& worldBounds);

        void draw(sf::RenderWindow& window);


    private:
        
        bool checkIsJumping() {
            
            return velo
        }

        //time should be in seconds
        void updateVelocities(const float& deltaTime);
        void forceIntoWorldBounds(const sf::FloatRect& worldBounds);

        //velocity of player when he begins to move
        //measured in meters per second
        const sf::Vector2f MOVEMENT_VELOCITY;

        bool canJump;

        //when user is holding jump he will jump higher
        //it will basically disable gravity until extra jump timer exceeds the max time allowed for user to hold jump
        bool holdingJump;
        sf::Clock extraJumpTimer;
        const sf::Time extraJumpDuration;

        sf::Vector2f velocities;
        sf::RectangleShape boundingBox;

        //the control setup for this player
        PlayerKeys controls;
};

#endif // PLAYER_H_INCLUDED
